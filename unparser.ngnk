/
Copyright 2022 Chris Pearson

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


######################
##  ngn/k unparser  ##
######################

v, n, vv (?), vn, nvn, nv, nn combos (any more?)
(';f;f)       composition
(';f)         each
(+;(+;1 2);3) LHS brackets
`name         variable
,`name        symbol
,`a`b         symbol list
(4:; 1; 2)    make list
1 :'          LHS space required (disambiguate from 1: which is a verb)
1 f'          LHS space required (1f read as single unit)
a:[;1]        knows that : is a fn here, not assignment
(+:)#         wrap LHS in parens to force noun
+(#:)         wrap RHS in parens to force noun
(1)1          wrap LHS in parens to prevent becoming one list literal
(1 2)3        ^ see above
(`a)`a        ^ see above
(`a`a)`a      ^ see above


TODO
double-check function names
resolve inline TODOs
unicode char eg (Îº):{y!x y}
need different parse impl?:
- preserve whitespace
- preserve ; vs \n as separator
- comments ambiguous in parse tree eg (`p";hello/")~`p";/ hello"
\


\d unparser

EMPTY:*|`p"1+"
LIST:*`p"(1;1)"
data:~^`i`f`c`s`o?_@:
noun:{(LIST~*x)|data x}  / TODO better name?
mexpr:{(1=*&(|x)~\:EMPTY)|(3<#x)|noun@*x}
wrap:{(,,"("),x,,,")"}
sep:{@[(#i)#,,x;&~i:2!!-1+2*#y;:;y]}

L:{$[(mexpr x)|noun x; ,f x; wrap f x]}
R:{$[(EMPTY~x)|^`u`v?@x; ,f x; wrap f x]}
M:{$[|/(`w=@*x; ~^`u`v?@x; mexpr x); ,f x
     wrap f x]}

/ moved from inline in f - hit a fn length limit?
dyad:{
  $[`w=@*x; ,/,/(M;R)@'|x  / TODO what about (')', \\, etc?
    (~`w=@**x)&(~|/^`A`S?@'x)|`i`i~_@'x; ,/wrap[M@*x],R x 1
    ,/,/(M;R)@'x]}

/ every pass generates a list of strings
f:{$[EMPTY~x; ,""
     ~^`i`f`c`o?_@x; ,`k x
     1=#x; $[^`S`A?@x; ,"",$x; ,`k@*x]
     2=#x; dyad x
     LIST~*x; wrap sep[";"]@("",/)'o'1_x
     (')~*x; ,/o'1_x
     EMPTY~*x; ,/sep[,"\n"]@{$[(::)~x;,"";f x]}'1_x
     mexpr x; ,/(f@*x; ,,"["; ,/sep[";"]1_o'x; ,,"]")
     ,/,/(L;M;R)@'x 1 0 2]}  / infix

addspaces:{
  names:|/(4 3 4;6 3 4)~/:\:" n: a a "'{(*y;*|y;*x)}':x
  space:"n: a a "@"0:;A[a{"'{(*|y;*x)}':x
  space:~names|^("n:";"aa";"na";"an")?space
  space[&1&#x]:1
  " "/,/'(&space)_x}

unparse: addspaces f@


/ #############
/ ##  tests  ##
/ #############

/ TODO: make this autodetect if being run as main (vs import), and enable if main
test:{$[y~unparse `p x;;`0:"[FAIL] GOT ",(unparse `p x)," NEED ",y]}
/ uncomment following line to disable tests:
/ test:{y;}

/ pure data
test["12";"12"]
test["1e-2";"0.01"]
test["1 2";"1 2"]
test["1f";"1.0"]  / no roundtrip
test["1 1f";"1.0 1.0"]
test["hi";"hi"]
test["\"hi\"";"\"hi\""]
test["`hi";"`hi"]
test["`hi`ho";"`hi`ho"]
test[,"+";,"+"]
test["+:";"+:"]
test["+/";"+/"]
test["+/'";"+/'"]
test[t;t:"(\"hi\";1)"]
test["::";"::"]

/ assignments
test["a:1";"a:1"]
test["a1:2";"a1:2"]
test["A1:2";"A1:2"]
test["(a;b):1 2";"(a;b):1 2"]

/ applications
test["+1";"+:1"]
test["1+";"1+"]
test["(12)34";"(12)34"]
test["12 34";"12 34"]
test["a,b"; "a,b"]
test["f x";"f x"]
test["1+2+3"; "1+2+3"]
test["(1+2)+3";"(1+2)+3"]
test["1+(2+3)";"1+2+3"]
test["1+(2+3)+4";"1+(2+3)+4"]
test["(1+2)3";"(1+2)3"]
test["(1+2)'3";"(1+2)'3"]
test["(+1)+1";"(+:1)+1"]  / TODO: remove colon
test["+/1";"+/1"]
test["+/\\";"+/\\"]
test["1+/";"1+/"]
test["{x}";"{x}"]
test["++";"+:+"]          / TODO: remove colon
test["+(+)";"+:(+)"]      / TODO: remove colon
test["f[1;2]";"f[1;2]"]
test["+[1;2]";"1+2"]
test["(+/1 2)3";"(+/1 2)3"]
test["((+/'1 2)3)4";"((+/'1 2)3)4"]
test["a+'b";"a+'b"]
test["f[;]";"f[;]"]
test["+[a;]";"a+"]
test["+[;a]";"+[;a]"]
test["@[a;1;b]";"@[a;1;b]"]
test["@[a;1;:;b]";"@[a;1;:;b]"]
test["(1+2;3)";"(1+2;3)"]
test["(1)1";"(1)1"]
test["(1 2)3";"(1 2)3"]
test["(`a)`a";"(`a)`a"]
test["(`a`b)`c";"(`a`b)`c"]
test["`a`b 1";"`a`b 1"]
test["+:/";"+:/"]
test["1+:/";"1+:/"]
test["p+:/";"p+:/"]
test["$[a;1;2;3;4]";"$[a;1;2;3;4]"]
test["1 f'2";"1 f'2"]
test["(++)2";"(+:+:)2"]  / TODO: remove colon; decide if this is OK
test["f'[a;b;c]";"f'[a;b;c]"]
test["1 :/";"1 :/"]
test["(1+2)#";"(1+2)#"]
test["(+:)#";"(+:)#"]
test[":[;a]#";":[;a]#"]
test["((1+2)+(3+4))#";"((1+2)+3+4)#"] 
test["(1 2)f'";"1 2 f'"]
test["3/1 2 3";"3/1 2 3"]
test["1:`hello";"1:`hello"]  / TODO: remove second colon
test["~(+/)";"~(+/)"]

/ multi-line
test["a:1;";"a:1\n"]
test["a:1;b:2";"a:1\nb:2"]

/ real-world examples
test:{$[x~unparse `p x;; `0:,/"[FAIL] GOT ",(f `p x)," NEED ",x]}

test ",/(':'1+!:#:x)@\:x"  / ColTim sublists  / TODO: remove : from !:, #:
test "@[A1;&:\";\"=A1;:;\",\"]"
test ",\\'(1_)\\a"
test "2*+/1+{x'y}/&:'\"><\"=\\:"  / TODO: remove : from &:
test "char:\"<>{}!\"\nsm:\"BETS \"!(\"T BE  \";\"  BE  \";\"T TTST\";\"TTTTTT\";\"T BE  \")\n\ng:{tokens:(#char)^char?x\n   states:\" \"sm[;]\\tokens   (+/a*0>':a:+\-/\"BE\"=\:states    / alt: -1+1^\"E B\"?states\n    +/\"T\"=&':states)}\n\n(11846;6285)~g input\n"

\d .
